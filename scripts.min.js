let adaptive = function() {
    fontHtml;
    let div = document.createElement('div');
    div.style.overflowY = 'scroll';
    div.style.width = '50px';
    div.style.height = '50px';
    div.style.visibility = 'hidden';
    document.body.appendChild(div);
    let scrollWidth = div.offsetWidth - div.clientWidth;
    document.body.removeChild(div);
    window_width = document.documentElement.clientWidth + scrollWidth;
    let adaptive_window = () => {
        window_width = document.documentElement.clientWidth + scrollWidth;
        fontHtml = window_width / 179;
        $('html').css({ 'font-size': fontHtml + 'px' })
        if (window_width < 501) {
            fontHtml = window_width / 52;
            $('html').css({ 'font-size': fontHtml + 'px' })
        }
    }
    adaptive_window();
    $(window).resize(() => {
        adaptive_window();
    })
    let trans = function() {
        $('.JSelemTrans').removeClass('JStrans');
        setTimeout(() => {
            $('.JSelemTrans').addClass('JStrans');
        }, 300);
    }
    trans();
    $(window).resize(() => {
        trans();
    })
}
let bodyFix = function() {
    scroll = 0;
    let fixFlag = false;

    $(window).scroll(() => {
        if (fixFlag) {
            return false;
        }
        scroll = $(window).scrollTop();
    })

    windowFix = (scroll) => {
        fixFlag = true;
        $('body').css({ 'position': 'fixed', 'top': (-scroll / fontHtml) + 'rem' })
    }

    windowFixRemove = (scroll) => {
        $('body').css({ 'position': 'static', 'top': 'unset', 'overflow-y': 'auto' })
        $('html,body').animate({ scrollTop: scroll }, 0)
        fixFlag = false;
    }
}
let customeEl = function() {
    let setParam = function() {
            $('.JScustomeEl').each(function() {
                const w = parseInt($(this).outerWidth());
                const h = parseInt($(this).outerHeight());
                $(this).css({ 'width': w / fontHtml + 'rem', 'height': h / fontHtml + 'rem' })
            })
        }
        // setParam();
        // $(window).resize(function() {
        //     setParam();
        // })
}
let dot = function() {
    let dot = {
        object: $('.JSdot'),
        leftStart: $('.menu__items._curry').position().left,
        widthStart: parseFloat($('.menu__items._curry').outerWidth()),
        widthDot: parseFloat($('.JSdot').outerWidth()),
        move: function($w) {
            this.object.css({ 'transform': 'translate(' + $w / body_px + 'rem,0)' })
        },
        startPos: function() {
            this.object.removeClass('_active')
            let $val = this.leftStart + (this.widthStart / 2)
            this.move($val)
            this.object.removeClass('_dis')
        },
        nextPos: function($this) {
            this.object.addClass('_active')
            let $val = $this.position().left + parseFloat($this.outerWidth()) / 2;
            this.move($val)
        }
    }

    let timerId;
    $('.menu__link').mouseenter(function() {
        dot.nextPos($(this));
        if (timerId) {
            clearTimeout(timerId);
        }
    })

    $('.menu__link').mouseleave(function() {
        timerId = setTimeout(function() {
            dot.startPos();
        }, 300)
    })
    dot.startPos();
}
let dragMove = function() {
    let dragPhoto = {
        obj: $('.JSlineSlider'),
        flagF: false,
        flag: false,
        startX: 0,
        curryX: 0,
        lastX: 0,
        width: parseFloat($('.JSdragBox').outerWidth()),
        move: function() {
            this.obj.css({ 'transform': 'translate(' + (-dragPhoto.curryX) / body_px + 'rem,0)' })
            $('.sliderBox__photo._top').css({ 'width': ((this.width / body_px) / 2 - dragPhoto.curryX / body_px) + 'rem' })
        }
    }

    $(window).resize(() => {
        dragPhoto.width = parseFloat($('.JSdragBox').outerWidth());
    })

    $('.body').on('mousedown touchstart', '.JSlineSlider', function(e) {
        dragPhoto.flagF = true;
        dragPhoto.flag = true;
        e.changedTouches ? dragPhoto.startX = e.changedTouches[0].pageX : dragPhoto.startX = e.pageX;
    })

    $('.body').on('mousemove touchmove', function(e) {
        if (dragPhoto.flagF) {
            e.changedTouches ? check = dragPhoto.startX - e.changedTouches[0].pageX + dragPhoto.lastX : check = dragPhoto.startX - e.pageX + dragPhoto.lastX;
            if (!dragPhoto.flag || (check) > dragPhoto.width / 2 || (check) < -dragPhoto.width / 2) {
                return false;
            }
            e.changedTouches ? dragPhoto.curryX = dragPhoto.startX - e.changedTouches[0].pageX + dragPhoto.lastX : dragPhoto.curryX = dragPhoto.startX - e.pageX + dragPhoto.lastX;
            dragPhoto.move()
        }
    })

    $('.body').on('mouseup touchend', function() {
        if (dragPhoto.flagF) {
            dragPhoto.flag = false;
            dragPhoto.lastX = dragPhoto.curryX;
        }
    })

    el = document.getElementsByClassName('JSlineSlider');
    for (let i = 0; i < el.length; i++) {
        el[i].addEventListener('touchmove', e => e.preventDefault(), { passive: false });
    }

}
let form = function() {
    let formData = {
        "form1": {
            field: {
                "name": {
                    type: "text",
                    valid: "notNull",
                    description: "Имя"
                },
                "phone": {
                    type: "text",
                    valid: "phone",
                    description: "Телефон"
                },
                "email": {
                    type: "text",
                    valid: "email",
                    description: "Почта"
                },
                "age": {
                    type: "text",
                    valid: "age",
                    description: "Возраст"
                }
            },
            name: "form1",
            mail: true,
            mailAdres: "m-f-a1999@yandex.ru",
            title: "Form 1",
            filePath: "./img/"
        }
    }
    let files;
    let data = new FormData();
    let num = 0;
    let $file = {},
        $c = 0;
    $(document).on('change', '.JSfEl[type=file]', function() {
        files = this.files;
        let fI = $(this).closest('.JSform').attr('data-fId');
        $.each(files, function(key, file) {
            data.append(num, file);
            num++;
            f = files[key];
            let reader = new FileReader();
            reader.onload = function(e) {
                $file[$c] = {
                    valid: "file",
                    name: "file",
                    type: "file",
                    formName: fI,
                    name: file.name,
                    size: file.size
                }
                $c++;
            }
            reader.readAsDataURL(f);
        });
    })
    $('.JSform').each(function() {
        let id = $(this).attr('data-fId');
        formData[id].form = $(this);
        formData[id].length = $(this).find('.JSfEl').length;
    })
    getDate = function() {
        let date = new Date(),
            utc = 3;
        let year = parseInt(date.getUTCFullYear()) % 100;
        let mounth = date.getUTCMonth() + 1;
        if (parseInt(mounth / 10) == 0) {
            mounth = "0" + mounth;
        }
        let day = date.getUTCDate();
        if (parseInt(day / 10) == 0) {
            day = "0" + day;
        }
        date.setHours(date.getHours() + utc);
        let hours = date.getUTCHours();
        let minutes = date.getUTCMinutes();
        if (parseInt(hours / 10) == 0) {
            hours = "0" + hours;
        }
        if (parseInt(minutes / 10) == 0) {
            minutes = "0" + minutes;
        }
        dateStr = day + "." + mounth + "." + year + " — " + hours + ":" + minutes;
        return dateStr;
    }
    let getResponse = {
        "form1": {
            success: function() {
                console.log("Send form1");
            },
            error: function(fN, error) {
                for (key in error) {
                    console.log(key, error[key])
                    formData[fN].form.find(`.JSfEl[data-fName="${key}"]`).css({ 'border': '.1rem solid red' })
                }
                console.log("Error form1");
            }
        }
    }
    let send = {
        message: {},
        check: function(fN) {
            this.message = {};
            let request = {};
            let counter = 0;
            formData[fN].form.find('.JSfEl[type!=file]').each(function() {
                let name = $(this).attr('data-fName');
                let proto = formData[fN].field[name];
                let type = proto.type;
                switch (type) {
                    case "text":
                        request[counter] = {
                            valid: proto.valid,
                            name: name,
                            type: type,
                            description: proto.description,
                            value: $(this).val()
                        }
                        break;
                    case "radio":
                        request[counter] = {
                            valid: proto.valid,
                            type: type,
                            description: proto.description,
                            value: $(this).find('input:checked').attr('value')
                        }
                        break;
                    case "checkbox":
                        request[counter] = {
                            type: type,
                            description: proto.description,
                            value: ""
                        }
                        $(this).find('input:checked').each(function() {
                            request[counter].value += $(this).attr('value') + "; ";
                        })
                        break;
                }
                counter++;
            })
            this.message = Object.assign({}, request)
            console.log($file);
        },
        send: function(fN) {
            data.append("requestMessage", JSON.stringify(this.message));
            data.append("requestData", JSON.stringify(formData[fN]));
            data.append("requestFile", JSON.stringify($file));
            data.append("dateSend", getDate());
            $.ajax({
                type: "POST",
                url: "send.php",
                data: data,
                processData: false,
                contentType: false,
                success: function(json) {
                    let response = JSON.parse(json);
                    console.log(response);
                    if (response.error.length == 0) {
                        getResponse[fN].success();
                    } else {
                        getResponse[fN].error(fN, response.error);
                    }

                }
            })
        }
    }
    let formName;
    $('.JSformButton').click(function() {
        let formName = $(this).closest('.JSform').attr('data-fId')
        send.check(formName);
        send.send(formName);
    })
}
let headerAnim = function() {
    let numLike = 8,
        numComment = 13,
        numAdd = 4;
    let speedLike = 10,
        intervalLike;
    let numLikeF = function() {
        clearInterval(intervalLike);
        intervalLike = setInterval(() => {
            if (speedLike >= 180) {
                clearInterval(intervalLike);
                return false;
            }
            numLike++;
            $('.JSheaderAnimNumLike').text(numLike);
            speedLike += 2;
            numLikeF();
        }, speedLike)
    }

    let speedComment = 200,
        intervalComment;
    let numCommentF = function() {
        clearInterval(intervalComment);
        intervalComment = setInterval(() => {
            if (speedComment >= 300) {
                clearInterval(intervalComment);
                return false;
            }
            numComment++;
            $('.JSheaderAnimNumComment').text(numComment);
            speedComment += 3;
            numCommentF();
        }, speedComment)
    }

    let speedAdd = 300,
        intervalAdd;
    let numAddF = function() {
        clearInterval(intervalAdd);
        intervalAdd = setInterval(() => {
            if (speedAdd >= 380) {
                clearInterval(intervalAdd);
                return false;
            }
            numAdd++;
            $('.JSheaderAnimNumAdd').text(numAdd);
            speedAdd += 4;
            numAddF();
        }, speedAdd)
    }

    let stepItem = function() {
        let itemSpeed = 0,
            arrStep = [],
            count = 0;
        $('.JSheaderAminItem').each(function() {
            arrStep.push($(this));
            itemSpeed += 350;
            setTimeout(() => {
                arrStep[count].addClass('_active');
                count++;
            }, itemSpeed)
        })
    }

    setTimeout(() => {
            $(".JSheaderAnimStat").addClass('_active');
            numLikeF();
            numCommentF();
            numAddF();
            stepItem();
            $('.JSheaderBomb').addClass('_active');
            $('.JSheaderContent').addClass('_active');
        }, 1300)
        // setTimeout(() => {
        //     $('.JSheaderAnimStat').addClass('_fade');
        // }, 3000)

}

var default_placeholder;
var height_input;
var curry_selector;
var css_object;

$('.JSplaceholderAppdate').each(function() {
    default_placeholder = $(this).attr('placeholder');
    height_input = parseInt($(this).height()) + parseInt($(this).css('padding'));
    $(this).wrap("<div class='JSelemTrans inputBox'></div>")
    $(this).attr('placeholder', '');
    $(this).after("<label class='JSelemTrans inputBox__label'>" + default_placeholder + "</label>");
    $(this).closest('.inputBox').append("<img src='img/warning.svg' class='inputBox__error'>")
    css_object = $(this).css('margin-top')
    $(this).closest('.inputBox').css({ 'margin-top': css_object })
    css_object = $(this).css('margin-right')
    $(this).closest('.inputBox').css({ 'margin-right': css_object })
    css_object = $(this).css('margin-bottom')
    $(this).closest('.inputBox').css({ 'margin-bottom': css_object })
    css_object = $(this).css('margin-left')
    $(this).closest('.inputBox').css({ 'margin-left': css_object })
    $(this).css({ 'margin': '0' })
})

$(document).on('click', '.inputBox__label', function() {
    $(this).prev().focus();
    // $(this).addClass('_active')
    $(this).closest('.inputBox').find('.inputBox__error').removeClass('_active')
})

var check_val = function() {
    $('.JSplaceholderAppdate').each(function() {
        curry_selector = $(this).closest('.inputBox').find('.inputBox__label');
        if ($(this).val() != 0) {
            curry_selector.addClass('_active')
            if ($(this).is(':focus')) {
                $(this).closest('.inputBox').find('.inputBox__label').addClass('_active')
            }
        } else {
            if ($(this).is(':focus')) {
                curry_selector.addClass('_active')
                $(this).closest('.inputBox').find('.inputBox__error').removeClass('_active')
            } else {
                curry_selector.removeClass('_active')
            }
        }
    })
}
setInterval(check_val, 10)
$('.JSmenuOpen').click(function() {
    $('.JSmenu').addClass('_active');
    windowFix(scroll);
})

$('.JSmenuClose').click(function() {
    $('.JSmenu').removeClass('_active');
    windowFixRemove(scroll);
})

$('.JSmenuItem').click(function() {
    if (window_width < 500) {
        $('.JSmenu').removeClass('_active');
        windowFixRemove(scroll);
    }
    let name = $(this).attr('data-name');
    let topSection = $(`.${name}`).offset().top;
    $('html,body').animate({ scrollTop: topSection }, 300);
})
var fontHtml, scroll, windowFix, windowFixRemove;
window.onload = () => {
    adaptive();
    bodyFix();
    form();
    popup();
    customeEl();
    questions();
    slider();
    headerAnim();
}
let popup = function() {
    let open = false;
    let popup = {
        "popupTest": {
            open: function(p) {
                console.log("open Popup Test");
                windowFix(scroll);
                p.fadeIn(300);
            },
            close: function(p) {
                console.log("close Popup Test");
                windowFixRemove(scroll);
                p.fadeOut(300);
            }
        }
    }

    let openPopup = ($p) => {
        $a = $p.attr('data-p');
        $popup = $('.JSpopup[data-p=' + $a + ']');
        open = true;
        popup[$a].open($popup);
    }

    let closePopup = ($p) => {
        $a = $p.attr('data-p');
        $popup = $('.JSpopup[data-p=' + $a + ']');
        open = false;
        popup[$a].close($popup);
    }

    $(document).on('click', '.JSbtnOpenPopup', function() {
        openPopup($(this));
    })

    $(document).on('click', '.JSclosePopup', function() {
        closePopup($(this));
    })
}
let questions = function() {
    $('.JSquestion').click(function() {
        $(this).find('.JSquestionDrop').slideToggle(300);
        $(this).toggleClass('_active');
    })
    $('.JSquestion._active').find('.JSquestionDrop').slideDown(0);
}
let rangeMove = function() {
    let range = {};
    $('.JSrange').each(function() {
        let obj = {};
        obj.index = $(this).attr('data-index');
        obj.object = $(this);
        obj.flag = false;
        obj.min = parseFloat($(this).attr('data-min'));
        obj.max = parseFloat($(this).attr('data-max'));
        obj.curry = parseFloat($(this).attr('data-curry'));
        obj.text = $(this).attr('data-text');
        obj.startX = 0;
        obj.curryX = 0;
        obj.widthL = parseFloat($(this).outerWidth());
        obj.widthP = parseFloat($(this).find('.JSrangePoint').outerWidth());
        $(this).find('.JSrangeVal').text(obj.curry + " " + obj.text)
        let left = parseFloat(((obj.curry - obj.min) / (obj.max - obj.min)) * obj.widthL);
        $(this).find('.JSrangePoint').css({ 'left': left / body_px + 'rem' })
        $(this).find('.JSrangeLine').css({ 'background': 'linear-gradient(to right, #f22941 0%, #f22941 ' + left / body_px + 'rem, #e0e0e0 ' + left / body_px + 'rem, #e0e0e0 100%)' })
        obj.lastX = -left;
        range[$(this).attr('data-index')] = Object.assign({}, obj);
        obj = {};
    })

    let rangeMove = {
        flag: false,
        move: function($this) {
            $this.css({ 'left': (-range[index].curryX) / body_px + 'rem' })
        },
        val: function($this) {

            let val = Math.round(-range[index].curryX / (range[index].widthL / (range[index].max - range[index].min))) + range[index].min;
            range[index].object.attr('data-curry', val)
            $this.text(val + " " + range[index].text)
        },
        bg: function($this) {
            $this.css({ 'background': 'linear-gradient(to right, #f22941 0%, #f22941 ' + -range[index].curryX / body_px + 'rem, #e0e0e0 ' + -range[index].curryX / body_px + 'rem, #e0e0e0 100%)' })
        }
    }
    let index, $this;
    $('.body').on('mousedown touchstart', '.JSrangePoint', function(e) {
        rangeMove.flag = true;
        $this = $(this);
        index = $(this).closest('.JSrange').attr('data-index');
        range[index].flag = true;
        e.changedTouches ? range[index].startX = e.changedTouches[0].pageX : range[index].startX = e.pageX;
    })
    $('.body').on('mousemove touchmove', function(e) {
        if (rangeMove.flag) {
            e.changedTouches ? check = range[index].startX - e.changedTouches[0].pageX + range[index].lastX : check = range[index].startX - e.pageX + range[index].lastX;
            if (!range[index].flag || (check) > 0 || (check) < -range[index].widthL) {
                return false;
            }
            e.changedTouches ? range[index].curryX = range[index].startX - e.changedTouches[0].pageX + range[index].lastX : range[index].curryX = range[index].startX - e.pageX + range[index].lastX;
            rangeMove.move($this);
            rangeMove.val($this.closest('.JSrange').find('.JSrangeVal'));
            rangeMove.bg($this.closest('.JSrangeLine'));
        }
    })
    $('.body').on('mouseup touchend', function() {
        if (rangeMove.flag) {
            range[index].flag = false;
            range[index].lastX = range[index].curryX;
        }
    })
    $('.body').on('click', '.JSrangeLine', function(e) {
        if ($('.JSrangePoint').is(e.target)) {
            return false;
        }
        index = $(this).closest('.JSrange').attr('data-index');
        range[index].flag = false;
        range[index].curryX = -e.offsetX;
        range[index].lastX = -e.offsetX;
        rangeMove.move($(this).find('.JSrangePoint'))
        rangeMove.bg($(this))
        rangeMove.val($(this).closest('.JSrange').find('.JSrangeVal'))

    })
    el = document.getElementsByClassName('JSrangePoint');
    for (let i = 0; i < el.length; i++) {
        el[i].addEventListener('touchmove', e => e.preventDefault(), { passive: false });
        el[i].ondragstart = function() {
            return false;
        };
    }

}
$('.JSscreenTab').change(function() {
    let indexTab = $(this).val();
    $('.JSscreen').removeClass('_active');
    $(`.JSscreen:nth-child(${indexTab})`).addClass('_active');
})
var indexTabLast = 0,
    indexTab = 0;
$('.JSsearchTab').change(function() {
    let d;
    if (parseInt($(this).val()) > indexTabLast) {
        d = "right";
        indexTab = parseInt($(this).val()) - indexTabLast;
    } else {
        d = "left";
        indexTab = -(parseInt($(this).val()) - indexTabLast)
    }
    console.log(d)
    indexTabLast = parseInt($(this).val());
    sliderSetPos(4, d, indexTab);
})
var sliderStart;
let slider = function() {
    sliderData = {};
    let indexS = 0;
    $('.JSslider').each(function() {
        let indexSlid = 1;
        $(this).find('.JSsliderSlid').each(function() {
            $(this).attr('data-sliderIndex', indexSlid)
            indexSlid++;
        })
        let sliderObj = {};
        $(this).attr('data-index', indexS);
        indexS++;
        sliderObj.name = $(this).attr('data-sliderName');
        sliderObj.access = $(this).attr('data-sliderAccess');
        sliderObj.$this = $(this);
        sliderObj.index = parseInt($(this).attr('data-index'));
        sliderObj.currySlid = $(this).find('.JSsliderSlid._curry');
        sliderObj.timerId = null;
        sliderObj.timerMoveId = null;
        sliderObj.curryIndex = $(this).find('.JSsliderSlid._curry').index();
        sliderObj.length = $(this).find('.JSsliderSlid').length;
        sliderObj.align = $(this).attr('data-align');
        sliderObj.speed = parseFloat($(this).attr('data-speed'));
        for (let i = 0; i < sliderObj.length; i++) {
            $(this).find('.JSdotBox').append('<div class="JSelemTrans JSdot sliderBox__dot">•</div>');
        }
        $(this).find('.JSdot').eq(sliderObj.curryIndex).addClass('_curry')
        sliderObj.indexDot = $(this).find('.JSdot._curry').index();
        sliderObj.flag = true;
        sliderObj.deskType = 'rem';
        sliderObj.tableType = 'vw';
        sliderObj.mobType = 'vw';
        sliderObj.widthDesktopStep = parseFloat($(this).attr('data-desktopStep'));
        sliderObj.widthTableStep = parseFloat($(this).attr('data-tableStep'));
        sliderObj.widthMobileStep = parseFloat($(this).attr('data-mobileStep'));
        if (window_width > 500) {
            sliderObj.widthStep = sliderObj.widthDesktopStep;
            sliderObj.type = sliderObj.deskType;
        }
        // if (window_width > 500 && window_width < 1025) {
        //     sliderObj.widthStep = sliderObj.widthTableStep;
        //     sliderObj.type = sliderObj.tableType;
        //     sliderObj.val = 0;
        // }
        if (window_width > 0 && window_width < 500) {
            sliderObj.widthStep = sliderObj.widthMobileStep;
            sliderObj.type = sliderObj.mobType;
        }
        sliderObj.val = 0;
        sliderData[$(this).attr('data-index')] = Object.assign({}, sliderObj);
    })


    let sliderMove = {
        lastWidth: window_width,
        dot: function() {
            switch (sliderData[index].indexDot) {
                case sliderData[index].length:
                    sliderData[index].indexDot = 0;
                    break;
                case -1:
                    sliderData[index].indexDot = sliderData[index].length - 1;
                    break;
            }
        },
        return: function() {
            // sliderData[index].$this.find('*').removeAttr('style')
        },
        resize: function() {
            if (this.lastWidth > 500) {
                if (window_width < 500) {
                    this.return()
                }
            } else {
                if (window_width > 500) {
                    this.return()
                }
            }
        },
        move: function($sign, $f) {
            this.dot();
            clearTimeout(sliderData[index].timerMoveId);
            if ($f) {
                if ($sign == 0) {
                    sliderData[index].timerMoveId = setTimeout(() => {
                        sliderData[index].$this.find('.JSsliderLay').addClass('JStrans')
                        sliderData[index].$this.find('.JSsliderLay').css({ 'transform': 'translate(' + -sliderData[index].val + sliderData[index].type + ',0)' })
                        sliderData[index].$this.find('.JSsliderSlid').removeClass('_curry')
                        sliderData[index].$this.find('.JSsliderSlid').eq(sliderData[index].curryIndex + $sign).addClass('_curry')
                        sliderData[index].$this.find('.JSdot').removeClass('_curry')
                        sliderData[index].$this.find('.JSdot').eq(sliderData[index].indexDot).addClass('_curry')
                        let cur = sliderData[index].$this.find('.JSsliderSlid._curry').attr('data-sliderIndex');
                        sliderData[index].$this.find('.JSsliderCounter').text(cur);
                        switch (sliderData[index].name) {
                            case "how":
                                $('.JSscreen').removeClass('_active');
                                $(`.JSscreen:nth-child(${cur})`).addClass('_active');
                                break;
                        }
                    }, 20);
                } else {
                    sliderData[index].$this.find('.JSsliderLay').addClass('JStrans')
                    sliderData[index].$this.find('.JSsliderLay').css({ 'transform': 'translate(' + -sliderData[index].val + sliderData[index].type + ',0)' })
                    sliderData[index].$this.find('.JSsliderSlid').removeClass('_curry')
                    sliderData[index].$this.find('.JSsliderSlid').eq(sliderData[index].curryIndex + $sign).addClass('_curry')
                    sliderData[index].$this.find('.JSdot').removeClass('_curry')
                    sliderData[index].$this.find('.JSdot').eq(sliderData[index].indexDot).addClass('_curry')
                    let cur = sliderData[index].$this.find('.JSsliderSlid._curry').attr('data-sliderIndex');
                    sliderData[index].$this.find('.JSsliderCounter').text(cur);
                    switch (sliderData[index].name) {
                        case "how":
                            $('.JSscreen').removeClass('_active');
                            $(`.JSscreen:nth-child(${cur})`).addClass('_active');
                            break;
                    }
                }

            } else {
                sliderData[index].timerMoveId = setTimeout(() => {
                    sliderData[index].$this.find('.JSsliderLay').addClass('JStrans')
                    sliderData[index].$this.find('.JSsliderLay').css({ 'transform': 'translate(' + -sliderData[index].val + sliderData[index].type + ',0)' })
                    sliderData[index].$this.find('.JSsliderSlid').removeClass('_curry')
                    sliderData[index].$this.find('.JSsliderSlid').eq(sliderData[index].curryIndex + $sign).addClass('_curry')
                    sliderData[index].$this.find('.JSdot').removeClass('_curry')
                    sliderData[index].$this.find('.JSdot').eq(sliderData[index].indexDot).addClass('_curry')
                    let cur = sliderData[index].$this.find('.JSsliderSlid._curry').attr('data-sliderIndex');
                    sliderData[index].$this.find('.JSsliderCounter').text(cur);
                    switch (sliderData[index].name) {
                        case "how":
                            console.log(cur)
                            $('.JSscreen').removeClass('_active');
                            $(`.JSscreen:nth-child(${cur})`).addClass('_active');
                            break;
                        case "search":
                            console.log(cur - 1)
                            $(`.JSsearchTab`).prop('checked', false)
                            $(`.JSsearchTab[value="${parseInt(cur) - 1}"]`).prop('checked', true)
                            indexTabLast = cur - 1;
                            break;
                    }
                }, 20)
            }


        },
        clonePos: function() {
            sliderData[index].$this.find('.JSsliderLay').removeClass('JStrans')
            sliderData[index].$this.find('.JSsliderLay').css({ 'transform': 'translate(' + -sliderData[index].val + sliderData[index].type + ',0)' })
        },
        clone: function($dir, $s, $f, $c) {
            sliderData[index].flag = false;
            clearTimeout(sliderData[index].timerId);
            sliderData[index].timerId = setTimeout(() => {
                sliderData[index].flag = true;
            }, $s + 20)
            switch ($dir) {
                case "left":
                    sliderData[index].$this.find('.JSsliderSlid').eq(sliderData[index].length - 1).clone(true).removeClass('_curry').prependTo(sliderData[index].$this.find('.JSsliderLay'));
                    if (sliderData[index].align == "center") {
                        sliderData[index].val += sliderData[index].widthStep / 2;
                        if ($f) {
                            sliderData[index].$this.find('.JSsliderSlid').eq(sliderData[index].length).remove();
                            sliderData[index].val += sliderData[index].widthStep / 2;
                            this.clonePos();
                        } else {
                            setTimeout(() => {
                                sliderData[index].$this.find('.JSsliderSlid').eq(sliderData[index].length).remove();
                                sliderData[index].val += sliderData[index].widthStep / 2;
                                this.clonePos();
                            }, $s + 20)
                        }

                    }
                    if (sliderData[index].align == "left") {
                        sliderData[index].val += sliderData[index].widthStep;
                        if ($f) {
                            setTimeout(() => {
                                sliderData[index].$this.find('.JSsliderSlid').eq(sliderData[index].length).remove();
                            }, 600)
                        } else {
                            setTimeout(() => {
                                sliderData[index].$this.find('.JSsliderSlid').eq(sliderData[index].length).remove();
                            }, $s + 20)
                        }

                    }
                    this.clonePos();
                    break;
                case "right":
                    if ($f) {
                        sliderData[index].$this.find('.JSsliderSlid').eq($c).clone(true).removeClass('_curry').appendTo(sliderData[index].$this.find('.JSsliderLay'));
                    } else {
                        sliderData[index].$this.find('.JSsliderSlid').eq(0).clone(true).removeClass('_curry').appendTo(sliderData[index].$this.find('.JSsliderLay'));
                    }

                    if (sliderData[index].align == "center") {
                        sliderData[index].val -= sliderData[index].widthStep / 2;
                        this.clonePos();
                        if ($f) {
                            sliderData[index].$this.find('.JSsliderSlid').eq(0).remove();
                            sliderData[index].val -= sliderData[index].widthStep / 2;
                            this.clonePos()
                        } else {
                            setTimeout(() => {
                                sliderData[index].$this.find('.JSsliderSlid').eq(0).remove();
                                sliderData[index].val -= sliderData[index].widthStep / 2;
                                this.clonePos()
                            }, $s + 20)
                        }

                    }
                    if (sliderData[index].align == "left") {
                        if ($f) {
                            setTimeout(() => {
                                sliderData[index].$this.find('.JSsliderSlid').eq(0).remove();
                                sliderData[index].val -= sliderData[index].widthStep;
                                this.clonePos()
                            }, 600)
                        } else {
                            setTimeout(() => {
                                sliderData[index].$this.find('.JSsliderSlid').eq(0).remove();
                                sliderData[index].val -= sliderData[index].widthStep;
                                this.clonePos()
                            }, $s + 20)
                        }

                    }
                    break;
            }
        }
    }
    let index;
    sliderStart = function($index, $dir) {
        if (sliderData[$index].access == "mob") {
            if (window_width > 500) {
                return false;
            }
        }
        index = $index;
        if (!sliderData[index].flag) {
            return false;
        }
        let dir = $dir;
        sliderMove.clone(dir, sliderData[index].speed, false)
        let sign;
        switch (dir) {
            case "left":
                sliderData[index].val -= sliderData[index].widthStep;
                sliderData[index].indexDot--;
                sign = 0;
                break;
            case "right":
                sliderData[index].val += sliderData[index].widthStep;
                sliderData[index].indexDot++;
                sign = 1;
                break;
        }
        sliderMove.move(sign, false);
    }
    sliderSetPos = function($index, $dir, $count) {
        index = $index;
        if (!sliderData[index].flag) {
            return false;
        }
        let dir = $dir;
        let sign, val = 0;
        for (let i = 0; i < $count; i++) {
            sliderMove.clone(dir, -20, true, i)
            switch (dir) {
                case "left":
                    val -= sliderData[index].widthStep;
                    sliderData[index].indexDot--;
                    sign = 0;
                    break;
                case "right":
                    sliderData[index].val += sliderData[index].widthStep;
                    sliderData[index].indexDot++;
                    sign = 1;
                    break;
            }
        }
        // console.log(sliderData[index].val)
        if (dir == "left") {
            sliderData[index].val += val;
        }
        sliderMove.move(sign, true);
    }
    $('.JSsliderBtn').click(function() {
        sliderStart(parseInt($(this).closest('.JSslider').attr('data-index')), $(this).attr('data-dir'))
    })
    let startX = 0,
        startY = 0,
        curryX = 0,
        curryY = 0,
        flag = true,
        flagScrY = false,
        flagScrX = false,
        flagMove = true;
    let $slider = document.getElementsByClassName('JSslider');

    let $start = function(e) {
        for (let i = 0; i < $slider.length; i++) {
            for (let k = 0; k < $slider[i].getElementsByTagName('img').length; k++) {
                $slider[i].getElementsByTagName('img')[k].ondragstart = function() {
                    return false;
                };
            }
        }
        flagMove = false;
        if (e.changedTouches) {
            startX = e.changedTouches[0].pageX;
            startY = e.changedTouches[0].pageY;
        } else {
            startX = e.pageX;
            startY = e.pageY;
        }

    }
    let $move = function(e, t) {
        if (!flag || flagMove) {
            return false;
        }
        if (e.changedTouches) {
            curryX = startX - e.changedTouches[0].pageX;
            curryY = startY - e.changedTouches[0].pageY;
        } else {
            curryX = startX - e.pageX;
            curryY = startY - e.pageY;
        }

        let sign;
        if (flagScrX) {
            e.preventDefault();
        }
        if ((Math.abs(curryY) > Math.abs(curryX) || flagScrY) && !flagScrX) {
            flagScrY = true;
            return false;
        } else {
            flagScrX = true;
            e.preventDefault();
        }
        if (curryX > 30) {
            sign = "right";
            sliderStart(parseInt(t.attr('data-index')), sign);
            curryX = 0;
            flag = false;
        }
        if (curryX < -30) {
            sign = "left";
            sliderStart(parseInt(t.attr('data-index')), sign);
            curryX = 0;
            flag = false;
        }
    }
    let $end = function() {
        flagScrY = false;
        flagScrX = false;
        flagMove = true;
        flag = true;
    }
    for (let i = 0; i < $slider.length; i++) {
        $slider[i].addEventListener('touchstart', function(e) {
            $start(e);
        }, { passive: false })

        $slider[i].addEventListener('touchmove', function(e) {
            $move(e, $(this));
        }, { passive: false })

        $slider[i].addEventListener('touchend', function(e) {
            $end();
        }, { passive: false })

        $slider[i].addEventListener('mousedown', function(e) {
            $start(e);
        }, { passive: false })

        $slider[i].addEventListener('mousemove', function(e) {
            $move(e, $(this));
        }, { passive: false })

        $slider[i].addEventListener('mouseup', function(e) {
            $end();
        }, { passive: false })

        $slider[i].ongragstart = () => {
            return false;
        }

        // for (let j = 0; j < $slider[i].querySelector('img').length; j++) {
        //     $slider[i].querySelector('img')[j].ongragstart = () => {
        //         return false;
        //     }
        // }
    }

    $(window).resize(() => {
        sliderMove.resize();
    })


}
$('.JSvideoOpen').click(function() {
    $('.JSvideo').fadeIn(300).css({ 'display': 'flex' });
    $('.JSvideoFrame').attr('src', $('.JSvideoFrame').attr('data-src'));
})

$('.JSvideoClose').click(function() {
    $('.JSvideo').fadeOut(300);
    setTimeout(() => {
        $('.JSvideoFrame').attr('src', $('.JSvideoFrame').attr('data-src'));
    }, 300)
})
